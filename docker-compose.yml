networks: 
  app-network:
    driver: bridge

services:
  db:
    container_name: challenge_postgres_db
    image: postgres:17
    ports:
      - '${DB_PORT}:${DB_PORT}'
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    
    # Database health check
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 10s
      retries: 5

  backend:
    container_name: challenge_backend
    platform: ${DOCKER_PLATFORM}
    env_file: "backend/.env"          # Adds environment variables to backend (accessed by process.env.NAME)
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        BACKEND_PORT: ${BACKEND_PORT}
    ports:
      - '${BACKEND_PORT}:${BACKEND_PORT}'
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
  
  #frontend:
  #  container_name: challenge_frontend
  #  platform: ${DOCKER_PLATFORM}
  #  env_file: "frontend/.env"
  #  build:
  #    context: ./frontend
  #    dockerfile: Dockerfile
  #  ports:
  #    - '5553:5553'
  #  volumes:
  #    - ./frontend:/app
  #  depends_on:
  #    backend
  #  networks:
  #    - app-network

volumes:
  postgres-data: